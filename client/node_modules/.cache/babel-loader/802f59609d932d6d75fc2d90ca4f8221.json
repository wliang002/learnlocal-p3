{"ast":null,"code":"const express = require('express');\n\nconst router = express.Router();\n\nconst gravatar = require('gravatar');\n\nconst bcrypt = require('bcryptjs');\n\nconst jwt = require('jsonwebtoken');\n\nconst config = require('config');\n\nconst _require = require('express-validator/check'),\n      check = _require.check,\n      validationResult = _require.validationResult;\n\nconst User = require('../../models/User'); // @route    POST api/users\n// @desc     Register user\n// @access   Public\n\n\nrouter.post('/', [// run check function with a custom message\ncheck('name', 'Name is required') // make sure it's not empty\n.not().isEmpty(), // email validation\ncheck('email', 'Please include a valid email').isEmail(), // password validation\ncheck('password', 'Please enter a password with 6 or more characters').isLength({\n  min: 6\n})], async (req, res) => {\n  const errors = validationResult(req); // if there are errors\n\n  if (!errors.isEmpty()) {\n    // send a bad request with a specific error message\n    return res.status(400).json({\n      errors: errors.array()\n    });\n  }\n\n  const _req$body = req.body,\n        name = _req$body.name,\n        email = _req$body.email,\n        password = _req$body.password;\n\n  try {\n    // check if user already exists\n    // search by email\n    let user = await User.findOne({\n      email\n    });\n\n    if (user) {\n      return res.status(400).json({\n        errors: [{\n          msg: 'User already exists'\n        }]\n      });\n    } // get user's gravater which is based on the email\n\n\n    const avatar = gravatar.url(email, {\n      // default size\n      s: '200',\n      // default rating\n      r: 'pg',\n      // default image\n      d: 'mm'\n    });\n    user = new User({\n      name,\n      email,\n      avatar,\n      password\n    }); // encrypt password using bcrypt\n    // create a salt to do the hashing\n\n    const salt = await bcrypt.genSalt(10); // hash the password, create a hash\n\n    user.password = await bcrypt.hash(password, salt); // save user to the database\n\n    await user.save(); // return jsonwebtoken use that token to authenticate and access protected routes\n\n    const payload = {\n      user: {\n        id: user.id\n      }\n    };\n    jwt.sign(payload, config.get('jwtSecret'), // options: expires in 3600s, change after testing\n    {\n      expiresIn: 360000\n    }, (err, token) => {\n      if (err) throw err;\n      res.json({\n        token\n      });\n    }); //  res.send('User registered')\n  } catch (err) {\n    console.error(err.message);\n    res.status(500).send('Server error');\n  }\n});\nmodule.exports = router;","map":null,"metadata":{},"sourceType":"script"}