{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst _ = require(\"lodash\");\n\nexports.selectFields = (req, fields, locations) => _(fields).flatMap(field => _.flatMap(locations, location => {\n  return expandField(req, field, location);\n})) // Avoid duplicates if multiple field selections would return the same field twice.\n// E.g. with fields = ['*.foo', 'bar.foo'] and req.body = { bar: { foo: 1 }, baz: { foo: 2 } },\n// the instance bla.foo would appear twice, and baz.foo once.\n.uniqWith(isSameFieldInstance).value();\n\nfunction isSameFieldInstance(a, b) {\n  return a.path === b.path && a.location === b.location;\n}\n\nfunction expandField(req, field, location) {\n  const originalPath = field;\n  const pathToExpand = location === 'headers' ? field.toLowerCase() : field;\n  const paths = [];\n  expandPath(req[location], pathToExpand, paths);\n  return paths.map(path => {\n    const value = path === '' ? req[location] : _.get(req[location], path);\n    return {\n      location,\n      path,\n      originalPath,\n      value,\n      originalValue: value\n    };\n  });\n}\n\nfunction expandPath(object, path, accumulator) {\n  const segments = _.toPath(path);\n\n  const wildcardPos = segments.indexOf('*');\n\n  if (wildcardPos > -1) {\n    const subObject = wildcardPos === 0 ? object : _.get(object, segments.slice(0, wildcardPos));\n\n    if (!subObject || !_.isObjectLike(subObject)) {\n      return;\n    }\n\n    Object.keys(subObject).map(key => segments // Before the *\n    .slice(0, wildcardPos) // The part that the * matched\n    .concat(key) // After the *\n    .concat(segments.slice(wildcardPos + 1))).forEach(subPath => {\n      expandPath(object, subPath, accumulator);\n    });\n  } else {\n    const reconstructedPath = segments.reduce((prev, segment) => {\n      let part = '';\n\n      if (/^\\d+$/.test(segment)) {\n        // Index access\n        part = \"[\".concat(segment, \"]\");\n      } else if (prev) {\n        // Object key access\n        part = \".\".concat(segment);\n      } else {\n        // Top level key\n        part = segment;\n      }\n\n      return prev + part;\n    }, '');\n    accumulator.push(reconstructedPath);\n  }\n}","map":null,"metadata":{},"sourceType":"script"}