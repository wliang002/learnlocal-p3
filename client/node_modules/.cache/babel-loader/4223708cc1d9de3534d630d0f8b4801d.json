{"ast":null,"code":"const express = require('express');\n\nconst request = require('request');\n\nconst config = require('config');\n\nconst router = express.Router();\n\nconst auth = require('../../middleware/auth');\n\nconst _require = require('express-validator/check'),\n      check = _require.check,\n      validationResult = _require.validationResult;\n\nconst mongoose = require('mongoose');\n\nconst Profile = require('../../models/Profile');\n\nconst User = require('../../models/User'); // @route    GET api/profile/me\n// @desc     Get current users profile\n// @access   Private\n\n\nrouter.get('/me', auth, async (req, res) => {\n  try {\n    const profile = await Profile.findOne({\n      user: req.user.id\n    }).populate('user', ['name', 'avatar']); // check if there is no profile\n\n    if (!profile) {\n      return res.status(400).json({\n        msg: 'There is no profile for this user'\n      });\n    }\n\n    res.json(profile);\n  } catch (err) {\n    console.error(err.message);\n    res.status(500).send('Server Error');\n  }\n}); // @route    POST api/profile\n// @desc     Create or update a user profile\n// @access   Private\n\nrouter.post('/', // middleware: auth, validation\nauth, async (req, res) => {\n  const errors = validationResult(req); // if there are errors\n\n  if (!errors.isEmpty()) {\n    return res.status(400).json({\n      errors: errors.array()\n    });\n  }\n\n  const _req$body = req.body,\n        location = _req$body.location,\n        titles = _req$body.titles,\n        bio = _req$body.bio,\n        skills = _req$body.skills,\n        facebook = _req$body.facebook,\n        twitter = _req$body.twitter,\n        instagram = _req$body.instagram; // Build profile object\n\n  const profileFields = {};\n  profileFields.user = req.user.id; // if field is not empty, insert in profile obj\n\n  if (location) profileFields.location = location;\n  if (titles) profileFields.titles = titles;\n  if (bio) profileFields.bio = bio; // turn string into an array\n\n  if (skills) {\n    profileFields.skills = skills.split(',').map(skill => skill.trim());\n  } // Build social object\n\n\n  profileFields.social = {};\n  if (twitter) profileFields.social.twitter = twitter;\n  if (facebook) profileFields.social.facebook = facebook;\n  if (instagram) profileFields.social.instagram = instagram; // update & insert data\n\n  try {\n    let profile = await Profile.findOne({\n      user: req.user.id\n    });\n\n    if (profile) {\n      // Update\n      profile = await Profile.findOneAndUpdate({\n        user: req.user.id\n      }, {\n        $set: profileFields\n      }, {\n        new: true\n      });\n      return res.json(profile);\n    } // Create\n\n\n    profile = new Profile(profileFields);\n    await profile.save();\n    res.json(profile);\n  } catch (err) {\n    console.error(err.message);\n    res.status(500).send('Server Error');\n  }\n}); // @route    GET api/profile\n// @desc     Get all profiles\n// @access   Public\n\nrouter.get('/', async (req, res) => {\n  try {\n    // populate from user collection\n    const profiles = await Profile.find().populate('user', ['name', 'avatar']);\n    res.json(profiles);\n  } catch (err) {\n    console.error(err.message);\n    res.status(500).send('Server Error');\n  }\n}); // @route    GET api/profile/user/:user_id\n// @desc     Get profile by user ID\n// @access   Public\n\nrouter.get('/user/:user_id', async (req, res) => {\n  try {\n    const profile = await Profile.findOne({\n      user: req.params.user_id\n    }).populate('user', ['name', 'avatar']);\n    if (!profile) return res.status(400).json({\n      msg: 'Profile not found'\n    });\n    res.json(profile);\n  } catch (err) {\n    console.error(err.message);\n\n    if (err.kind === 'ObjectId') {\n      return res.status(400).json({\n        msg: 'Profile not found'\n      });\n    }\n\n    res.status(500).send('Server Error');\n  }\n}); // @route    DELETE api/profile\n// @desc     Delete profile, user\n// @access   Private\n\nrouter.delete('/', auth, async (req, res) => {\n  try {\n    // Remove user posts\n    // await Post.deleteMany({ user: req.user.id })\n    // Remove profile\n    await Profile.findOneAndRemove({\n      user: req.user.id\n    }); // Remove user\n\n    await User.findOneAndRemove({\n      _id: req.user.id\n    });\n    res.json({\n      msg: 'User deleted'\n    });\n  } catch (err) {\n    console.error(err.message);\n    res.status(500).send('Server Error');\n  }\n}); // Add classes\n// @route    PUT api/profile/events\n// @desc     Add profile events\n// @access   Private\n\nrouter.put('/events', [auth, [check('teachersName', 'Teachers name is required').not().isEmpty(), check('eventName', 'Event name is required').not().isEmpty(), check('eventType', 'Event type is required').not().isEmpty(), check('location', 'Location is required').not().isEmpty(), check('eventDate', 'Event Date is required').not().isEmpty(), check('eventTime', 'Event Time is required').not().isEmpty(), check('eventSize', 'Event Size is required').not().isEmpty(), check('description', 'Description is required').not().isEmpty()]], async (req, res) => {\n  const errors = validationResult(req);\n\n  if (!errors.isEmpty()) {\n    return res.status(400).json({\n      errors: errors.array()\n    });\n  }\n\n  const _req$body2 = req.body,\n        teachersName = _req$body2.teachersName,\n        eventName = _req$body2.eventName,\n        eventType = _req$body2.eventType,\n        location = _req$body2.location,\n        geocode = _req$body2.geocode,\n        eventDate = _req$body2.eventDate,\n        eventTime = _req$body2.eventTime,\n        eventSize = _req$body2.eventSize,\n        description = _req$body2.description;\n  const newEvent = {\n    teachersName,\n    eventName,\n    eventType,\n    location,\n    geocode,\n    eventDate,\n    eventTime,\n    eventSize,\n    description\n  };\n\n  try {\n    // find a profile to add classes to\n    const profile = await Profile.findOne({\n      user: req.user.id\n    }); // add new event on top\n\n    profile.events.unshift(newEvent);\n    await profile.save();\n    res.json(profile);\n  } catch (err) {\n    console.error(err.message);\n    res.status(500).send('Server Error');\n  }\n}); // Sign up for classes\n// @route    PUT api/profile//user/:user_id/events/:event_id\n// @desc     Add student to event\n// @access   Public\n\nrouter.post('/user/:user_id/events/:event_id', [check('studentsName', 'students name is required').not().isEmpty(), check('studentsEmail', 'email is required').not().isEmpty(), check('studentsPhone', 'phone is required').not().isEmpty()], async (req, res) => {\n  const errors = validationResult(req);\n\n  if (!errors.isEmpty()) {\n    return res.status(400).json({\n      errors: errors.array()\n    });\n  }\n\n  const _req$body3 = req.body,\n        studentsName = _req$body3.studentsName,\n        studentsEmail = _req$body3.studentsEmail,\n        studentsPhone = _req$body3.studentsPhone;\n  const newStudent = {\n    studentsName,\n    studentsEmail,\n    studentsPhone\n  };\n\n  try {\n    const profile = await Profile.findOne({\n      user: req.params.user_id\n    });\n    if (!profile) return res.status(400).json({\n      msg: 'Profile not found'\n    }); // res.json(profile)\n    // // get the id of the class\n\n    const eventIds = profile.events.map(event => event._id.toString()); // // get the index of the class\n\n    const eventIndex = eventIds.indexOf(req.params.event_id); // if the id doesn't exist\n\n    if (eventIndex === -1) {\n      return res.status(500).json({\n        msg: 'event not found'\n      });\n    } else {\n      profile.events[eventIndex].students.unshift(newStudent);\n      await profile.save();\n      res.json(profile);\n    }\n  } catch (err) {\n    console.log(err.message);\n    res.status(500).send('Server Error');\n  }\n}); // delete a class\n// @route    DELETE api/profile/events/:event_id\n// @desc     Delete a class from profile\n// @access   Private\n\nrouter.delete('/events/:event_id', auth, async (req, res) => {\n  try {\n    // get the correct profile\n    const foundProfile = await Profile.findOne({\n      user: req.user.id\n    }); // get the id of the class\n\n    const eventIds = foundProfile.events.map(event => event._id.toString()); // get the index of the class\n\n    const removeIndex = eventIds.indexOf(req.params.event_id); // if the id doesn't exist\n\n    if (removeIndex === -1) {\n      return res.status(500).json({\n        msg: 'Server error'\n      });\n    } else {\n      // remove the class from the array\n      foundProfile.events.splice(removeIndex, 1);\n      await foundProfile.save();\n      return res.status(200).json(foundProfile);\n    }\n  } catch (error) {\n    console.error(error);\n    return res.status(500).json({\n      msg: 'Server error'\n    });\n  }\n});\nmodule.exports = router;","map":null,"metadata":{},"sourceType":"script"}