{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : new P(function (resolve) {\n        resolve(result.value);\n      }).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst base_1 = require(\"../base\");\n\nclass CustomCondition {\n  constructor(condition) {\n    this.condition = condition;\n  }\n\n  run(_context, value, meta) {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        const result = this.condition(value, meta);\n        yield result; // if the promise resolved or the result is truthy somehow, then there's no validation halt.\n\n        if (!result) {\n          // the error thrown here is symbolic, it will be re-thrown in the catch clause anyway.\n          throw new Error();\n        }\n      } catch (e) {\n        throw new base_1.ValidationHalt();\n      }\n    });\n  }\n\n}\n\nexports.CustomCondition = CustomCondition;","map":null,"metadata":{},"sourceType":"script"}