{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : new P(function (resolve) {\n        resolve(result.value);\n      }).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst _ = require(\"lodash\");\n\nconst utils_1 = require(\"../utils\");\n\nclass Sanitization {\n  constructor(sanitizer, custom, options = []) {\n    this.sanitizer = sanitizer;\n    this.custom = custom;\n    this.options = options;\n  }\n\n  run(context, value, meta) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const req = meta.req,\n            path = meta.path,\n            location = meta.location;\n      const newValue = this.custom ? this.sanitizer(value, meta) : this.sanitizer(utils_1.toString(value), ...this.options);\n      context.setData(path, newValue, location); // Checks whether the value changed.\n      // Avoids e.g. undefined values being set on the request if it didn't have the key initially.\n\n      const reqValue = path !== '' ? _.get(req[location], path) : req[location];\n\n      if (reqValue !== newValue) {\n        path !== '' ? _.set(req[location], path, newValue) : _.set(req, location, newValue);\n      }\n    });\n  }\n\n}\n\nexports.Sanitization = Sanitization;","map":null,"metadata":{},"sourceType":"script"}