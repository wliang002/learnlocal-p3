{"ast":null,"code":"import axios from 'axios';\nimport { setAlert } from './alert';\nimport { GET_PROFILE, GET_PROFILES, PROFILE_ERROR, UPDATE_PROFILE, CLEAR_PROFILE, DELETE_ACCOUNT } from './types'; // Get current users profile\n// geting api/profile/me return the user id\n\nexport const getCurrentProfile = () => async dispatch => {\n  try {\n    const res = await axios.get('/api/profile/me'); // put profile data to state\n\n    dispatch({\n      type: GET_PROFILE,\n      payload: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: PROFILE_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n}; // Create or update profile\n\nexport const createProfile = (formData, history, edit = false) => async dispatch => {\n  try {\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      } // make a post request\n\n    };\n    const res = await axios.post('/api/profile', formData, config); // send the user profile to state\n\n    dispatch({\n      type: GET_PROFILE,\n      payload: res.data\n    }); // send an alert after profile changes\n\n    dispatch(setAlert(edit ? 'Profile Updated' : 'Profile Created', 'success')); // if creating a new profile, redirect to dashboard\n\n    if (!edit) {\n      history.push('/dashboard');\n    }\n  } catch (err) {\n    const errors = err.response.data.errors; // validation error\n\n    if (errors) {\n      errors.forEach(error => dispatch(setAlert(error.msg, 'danger')));\n    }\n\n    dispatch({\n      type: PROFILE_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n}; // Add Classes\n\nexport const addClasses = (formData, history) => async dispatch => {\n  try {\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      } // make a put request\n\n    };\n    const res = await axios.put('/api/profile/events', formData, config);\n    dispatch({\n      type: UPDATE_PROFILE,\n      payload: res.data\n    });\n    dispatch(setAlert('Class Added', 'success'));\n    history.push('/dashboard');\n  } catch (err) {\n    const errors = err.response.data.errors;\n\n    if (errors) {\n      errors.forEach(error => dispatch(setAlert(error.msg, 'danger')));\n    }\n\n    dispatch({\n      type: PROFILE_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n}; // Get all profiles\n// get request to api/profile\n\nexport const getProfiles = () => async dispatch => {\n  // clear past user profile\n  dispatch({\n    type: CLEAR_PROFILE\n  });\n\n  try {\n    const res = await axios.get('/api/profile');\n    dispatch({\n      type: GET_PROFILES,\n      payload: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: PROFILE_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n}; // Get profile by ID\n\nexport const getProfileById = userId => async dispatch => {\n  try {\n    const res = await axios.get(\"/api/profile/user/\".concat(userId));\n    dispatch({\n      type: GET_PROFILE,\n      payload: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: PROFILE_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n}; // Sign up for classes\n\nexport const studentSignUp = (userId, id, formData, history) => async dispatch => {\n  try {\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n    const res = await axios.post(\"/api/profile/user/\".concat(userId, \"/events/\").concat(id));\n  } catch (err) {\n    dispatch({\n      type: PROFILE_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n}; // delete account and profile\n// delete request to /api/profile\n\nexport const deleteAccount = () => async dispatch => {\n  if (window.confirm('Are you sure?')) {\n    try {\n      await axios.delete(\"/api/profile\");\n      dispatch({\n        type: DELETE_ACCOUNT\n      });\n      dispatch({\n        type: CLEAR_PROFILE\n      });\n      dispatch(setAlert('Account Deleted '));\n    } catch (err) {\n      dispatch({\n        type: PROFILE_ERROR,\n        payload: {\n          msg: err.response.statusText,\n          status: err.response.status\n        }\n      });\n    }\n  }\n}; // delete classes\n// delete request to/ api/profile/events/:event_id\n\nexport const deleteEvent = id => async dispatch => {\n  try {\n    const res = await axios.delete(\"/api/profile/events/\".concat(id));\n    dispatch({\n      type: UPDATE_PROFILE,\n      payload: res.data\n    });\n    dispatch(setAlert('Class Deleted', 'success'));\n  } catch (err) {\n    dispatch({\n      type: PROFILE_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n};","map":{"version":3,"sources":["/Users/weixinliang/Desktop/project3/current/learnlocal-p3/client/src/actions/profile.js"],"names":["axios","setAlert","GET_PROFILE","GET_PROFILES","PROFILE_ERROR","UPDATE_PROFILE","CLEAR_PROFILE","DELETE_ACCOUNT","getCurrentProfile","dispatch","res","get","type","payload","data","err","msg","response","statusText","status","createProfile","formData","history","edit","config","headers","post","push","errors","forEach","error","addClasses","put","getProfiles","getProfileById","userId","studentSignUp","id","deleteAccount","window","confirm","delete","deleteEvent"],"mappings":"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","sourcesContent":["import axios from 'axios'\nimport { setAlert } from './alert'\n\nimport {\n  GET_PROFILE,\n  GET_PROFILES,\n  PROFILE_ERROR,\n  UPDATE_PROFILE,\n  CLEAR_PROFILE,\n  DELETE_ACCOUNT\n} from './types'\n\n// Get current users profile\n// geting api/profile/me return the user id\nexport const getCurrentProfile = () => async dispatch => {\n  try {\n    const res = await axios.get('/api/profile/me')\n    // put profile data to state\n    dispatch({\n      type: GET_PROFILE,\n      payload: res.data\n    })\n  } catch (err) {\n    dispatch({\n      type: PROFILE_ERROR,\n      payload: { msg: err.response.statusText, status: err.response.status }\n    })\n  }\n}\n\n// Create or update profile\nexport const createProfile = (\n  formData,\n  history,\n  edit = false\n) => async dispatch => {\n  try {\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }\n    // make a post request\n    const res = await axios.post('/api/profile', formData, config)\n    // send the user profile to state\n    dispatch({\n      type: GET_PROFILE,\n      payload: res.data\n    })\n    // send an alert after profile changes\n    dispatch(setAlert(edit ? 'Profile Updated' : 'Profile Created', 'success'))\n    // if creating a new profile, redirect to dashboard\n    if (!edit) {\n      history.push('/dashboard')\n    }\n  } catch (err) {\n    const errors = err.response.data.errors\n    // validation error\n    if (errors) {\n      errors.forEach(error => dispatch(setAlert(error.msg, 'danger')))\n    }\n\n    dispatch({\n      type: PROFILE_ERROR,\n      payload: { msg: err.response.statusText, status: err.response.status }\n    })\n  }\n}\n\n// Add Classes\nexport const addClasses = (formData, history) => async dispatch => {\n  try {\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }\n    // make a put request\n    const res = await axios.put('/api/profile/events', formData, config)\n\n    dispatch({\n      type: UPDATE_PROFILE,\n      payload: res.data\n    })\n\n    dispatch(setAlert('Class Added', 'success'))\n\n    history.push('/dashboard')\n  } catch (err) {\n    const errors = err.response.data.errors\n\n    if (errors) {\n      errors.forEach(error => dispatch(setAlert(error.msg, 'danger')))\n    }\n\n    dispatch({\n      type: PROFILE_ERROR,\n      payload: { msg: err.response.statusText, status: err.response.status }\n    })\n  }\n}\n\n// Get all profiles\n// get request to api/profile\nexport const getProfiles = () => async dispatch => {\n  // clear past user profile\n  dispatch({ type: CLEAR_PROFILE })\n\n  try {\n    const res = await axios.get('/api/profile')\n\n    dispatch({\n      type: GET_PROFILES,\n      payload: res.data\n    })\n  } catch (err) {\n    dispatch({\n      type: PROFILE_ERROR,\n      payload: { msg: err.response.statusText, status: err.response.status }\n    })\n  }\n}\n// Get profile by ID\nexport const getProfileById = userId => async dispatch => {\n  try {\n    const res = await axios.get(`/api/profile/user/${userId}`)\n\n    dispatch({\n      type: GET_PROFILE,\n      payload: res.data\n    })\n  } catch (err) {\n    dispatch({\n      type: PROFILE_ERROR,\n      payload: { msg: err.response.statusText, status: err.response.status }\n    })\n  }\n}\n\n// Sign up for classes\nexport const studentSignUp = (userId, id, formData, history) => async dispatch => {\n  try {\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }\n    const res = await axios.post(`/api/profile/user/${userId}/events/${id}`)\n\n\n\n  } catch (err) {\n    dispatch({\n      type: PROFILE_ERROR,\n      payload: { msg: err.response.statusText, status: err.response.status } \n    })\n  }\n}\n\n// delete account and profile\n// delete request to /api/profile\nexport const deleteAccount = () => async dispatch => {\n  if (window.confirm('Are you sure?')) {\n    try {\n      await axios.delete(`/api/profile`)\n\n      dispatch({\n        type: DELETE_ACCOUNT\n      })\n      dispatch({\n        type: CLEAR_PROFILE\n      })\n      dispatch(setAlert('Account Deleted '))\n    } catch (err) {\n      dispatch({\n        type: PROFILE_ERROR,\n        payload: { msg: err.response.statusText, status: err.response.status }\n      })\n    }\n  }\n}\n\n// delete classes\n// delete request to/ api/profile/events/:event_id\nexport const deleteEvent = id => async dispatch => {\n  try {\n    const res = await axios.delete(`/api/profile/events/${id}`)\n\n    dispatch({\n      type: UPDATE_PROFILE,\n      payload: res.data\n    })\n\n    dispatch(setAlert('Class Deleted', 'success'))\n  } catch (err) {\n    dispatch({\n      type: PROFILE_ERROR,\n      payload: { msg: err.response.statusText, status: err.response.status }\n    })\n  }\n}\n\n"]},"metadata":{},"sourceType":"module"}