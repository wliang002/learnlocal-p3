{"ast":null,"code":"let API_KEY;\n/**\n * Module to use google's geocoding & reverse geocoding.\n */\n\nlet Geocoder;\nexport default Geocoder = {\n  /**\n   * Initialize the module.\n   * @param {String} apiKey The api key of your application in google.\n   * @see https://developers.google.com/maps/documentation/geocoding/intro#geocoding\n   */\n  init(apiKey) {\n    API_KEY = apiKey;\n  },\n\n  /**\n   * @returns {boolean} True if the module has been initiated. False otherwise.\n   */\n  get isInit() {\n    return !!API_KEY;\n  },\n\n  /**\n   * @see {@link Geocoder.init}\n   * @deprecated\n   */\n  setApiKey(API_KEY) {\n    this.init(API_KEY);\n  },\n\n  /**\n   * Do <a href=\"https://developers.google.com/maps/documentation/geocoding/intro#ReverseGeocoding\">(reverse) geocoding</a>, converting geographic coordinates into a human-readable address & vice-versa.\n   * Accepted parameters:\n   * <ul>\n   *     <li>from(Number latitude, Number longitude)</li>\n   *     <li>from(Array [latitude, longitude])</li>\n   *     <li>from(Object {latitude, longitude})</li>\n   *     <li>from(Object {lat, lng})</li>\n   *     <li>from(String address)</li>\n   * </ul>\n   * @returns {Promise.<Object>} Object containing informations about the place at the coordinates.\n   * @see https://developers.google.com/maps/documentation/geocoding/intro#GeocodingResponses\n   */\n  async from(...params) {\n    // check api key\n    if (!Geocoder.isInit) throw {\n      code: Geocoder.Errors.NOT_INITIATED,\n      message: \"Geocoder isn't initialized. Call Geocoder.init function (only once), passing it your app's api key as parameter.\"\n    }; // --- convert parameters ---\n\n    let queryParams; // (latitude, longitude)\n\n    if (!isNaN(params[0]) && !isNaN(params[1])) queryParams = {\n      latlng: \"\".concat(params[0], \",\").concat(params[1])\n    }; // [latitude, longitude]\n    else if (params[0] instanceof Array) queryParams = {\n        latlng: \"\".concat(params[0][0], \",\").concat(params[0][1])\n      }; // {latitude, longitude}  or {lat, lng}\n      else if (params[0] instanceof Object) queryParams = {\n          latlng: \"\".concat(params[0].lat || params[0].latitude, \",\").concat(params[0].lng || params[0].longitude)\n        }; // address\n        else if (typeof params[0] === 'string') queryParams = {\n            address: params[0]\n          }; // --- start geocoding ---\n    // check query params\n\n    if (!queryParams) // no query params, means parameters where invalid\n      throw {\n        code: Geocoder.Errors.INVALID_PARAMETERS,\n        message: \"Invalid parameters : \\n\" + JSON.stringify(params, null, 2)\n      };\n    queryParams.key = API_KEY; // build url\n\n    const url = 'https://maps.google.com/maps/api/geocode/json?' + toQueryParams(queryParams);\n    let response, data; // fetch\n\n    try {\n      response = await fetch(url);\n    } catch (error) {\n      throw {\n        code: Geocoder.Errors.FETCHING,\n        message: \"Error while fetching. Check your network.\",\n        origin: error\n      };\n    } // parse\n\n\n    try {\n      data = await response.json();\n    } catch (error) {\n      throw {\n        code: Geocoder.Errors.PARSING,\n        message: \"Error while parsing response's body into JSON. The response is in the error's 'origin' field. Try to parse it yourself.\",\n        origin: response\n      };\n    } // check response's data\n\n\n    if (data.status !== 'OK') throw {\n      code: Geocoder.Errors.SERVER,\n      message: \"Error from the server while geocoding. The received datas are in the error's 'origin' field. Check it for more informations.\",\n      origin: data\n    };\n    return data;\n  },\n\n  /**\n   * <a href=\"https://developers.google.com/maps/documentation/geocoding/intro#geocoding\">Geocodes</a>, converting address into a geographic coordinates.\n   * Use {@link Geocoder.from} instead.\n   * @param {String} address Address to reverse geocode.\n   * @returns {Promise.<Object>} Object containing informations about the place and the coordinates.\n   * @see https://developers.google.com/maps/documentation/geocoding/intro#Viewports\n   * @deprecated\n   */\n  getFromLocation(address) {\n    return this.from(address);\n  },\n\n  /**\n   * Do <a href=\"https://developers.google.com/maps/documentation/geocoding/intro#ReverseGeocoding\">reverse geocoding</a>, converting geographic coordinates into a human-readable address.\n   * Use {@link Geocoder.from} instead.\n   * @param {Number} lat Latitude coordinate.\n   * @param {Number} lng Longitude coordinate.\n   * @returns {Promise.<Object>} Object containing informations about the place at the coordinates.\n   * @see https://developers.google.com/maps/documentation/geocoding/intro#GeocodingResponses\n   * @deprecated\n   */\n  getFromLatLng(lat, lng) {\n    return this.from(lat, lng);\n  },\n\n  /**\n   * All possible errors.\n   */\n  Errors: {\n    /**\n     * Module hasn't been initiated. Call {@link Geocoder.init}.\n     */\n    NOT_INITIATED: 0,\n\n    /**\n     * Parameters are invalid.\n     */\n    INVALID_PARAMETERS: 1,\n\n    /**\n     * Error wile fetching to server.\n     * The error.origin property contains the original fetch error.\n     */\n    FETCHING: 2,\n\n    /**\n     * Error while parsing server response.\n     * The error.origin property contains the response.\n     */\n    PARSING: 3,\n\n    /**\n     * Error from the server.\n     * The error.origin property contains the response's body.\n     */\n    SERVER: 4\n  }\n  /**\n   * Convert an object into query parameters.\n   * @param {Object} object Object to convert.\n   * @returns {string} Encoded query parameters.\n   */\n\n};\n\nfunction toQueryParams(object) {\n  return Object.keys(object).filter(key => !!object[key]).map(key => key + \"=\" + encodeURIComponent(object[key])).join(\"&\");\n}","map":null,"metadata":{},"sourceType":"module"}