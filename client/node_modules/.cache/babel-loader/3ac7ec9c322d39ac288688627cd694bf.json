{"ast":null,"code":"// config.js (c) 2010-2015 Loren West and other contributors\n// May be freely distributed under the MIT license.\n// For further details and documentation:\n// http://lorenwest.github.com/node-config\n// Dependencies\nvar deferConfig = require('../defer').deferConfig,\n    DeferredConfig = require('../defer').DeferredConfig,\n    RawConfig = require('../raw').RawConfig,\n    Parser = require('../parser'),\n    Utils = require('util'),\n    Path = require('path'),\n    FileSystem = require('fs'); // Static members\n\n\nvar DEFAULT_CLONE_DEPTH = 20,\n    NODE_CONFIG,\n    CONFIG_DIR,\n    RUNTIME_JSON_FILENAME,\n    NODE_ENV,\n    APP_INSTANCE,\n    HOST,\n    HOSTNAME,\n    ALLOW_CONFIG_MUTATIONS,\n    CONFIG_SKIP_GITCRYPT,\n    NODE_CONFIG_PARSER,\n    env = {},\n    privateUtil = {},\n    deprecationWarnings = {},\n    configSources = [],\n    // Configuration sources - array of {name, original, parsed}\ncheckMutability = true,\n    // Check for mutability/immutability on first get\ngitCryptTestRegex = /^.GITCRYPT/; // regular expression to test for gitcrypt files.\n\n/**\n * <p>Application Configurations</p>\n *\n * <p>\n * The config module exports a singleton object representing all\n * configurations for this application deployment.\n * </p>\n *\n * <p>\n * Application configurations are stored in files within the config directory\n * of your application.  The default configuration file is loaded, followed\n * by files specific to the deployment type (development, testing, staging,\n * production, etc.).\n * </p>\n *\n * <p>\n * For example, with the following config/default.yaml file:\n * </p>\n *\n * <pre>\n *   ...\n *   customer:\n *     &nbsp;&nbsp;initialCredit: 500\n *     &nbsp;&nbsp;db:\n *       &nbsp;&nbsp;&nbsp;&nbsp;name: customer\n *       &nbsp;&nbsp;&nbsp;&nbsp;port: 5984\n *   ...\n * </pre>\n *\n * <p>\n * The following code loads the customer section into the CONFIG variable:\n * <p>\n *\n * <pre>\n *   var CONFIG = require('config').customer;\n *   ...\n *   newCustomer.creditLimit = CONFIG.initialCredit;\n *   database.open(CONFIG.db.name, CONFIG.db.port);\n *   ...\n * </pre>\n *\n * @module config\n * @class Config\n */\n\n/**\n * <p>Get the configuration object.</p>\n *\n * <p>\n * The configuration object is a shared singleton object within the application,\n * attained by calling require('config').\n * </p>\n *\n * <p>\n * Usually you'll specify a CONFIG variable at the top of your .js file\n * for file/module scope. If you want the root of the object, you can do this:\n * </p>\n * <pre>\n * var CONFIG = require('config');\n * </pre>\n *\n * <p>\n * Sometimes you only care about a specific sub-object within the CONFIG\n * object.  In that case you could do this at the top of your file:\n * </p>\n * <pre>\n * var CONFIG = require('config').customer;\n * or\n * var CUSTOMER_CONFIG = require('config').customer;\n * </pre>\n *\n * <script type=\"text/javascript\">\n *   document.getElementById(\"showProtected\").style.display = \"block\";\n * </script>\n *\n * @method constructor\n * @return CONFIG {object} - The top level configuration object\n */\n\nvar Config = function () {\n  var t = this; // Bind all utility functions to this\n\n  for (var fnName in util) {\n    if (typeof util[fnName] === 'function') {\n      util[fnName] = util[fnName].bind(t);\n    }\n  } // Merge configurations into this\n\n\n  util.extendDeep(t, util.loadFileConfigs());\n  util.attachProtoDeep(t); // Perform strictness checks and possibly throw an exception.\n\n  util.runStrictnessChecks(t);\n};\n/**\n * Utilities are under the util namespace vs. at the top level\n */\n\n\nvar util = Config.prototype.util = {};\n/**\n * Underlying get mechanism\n *\n * @private\n * @method getImpl\n * @param object {object} - Object to get the property for\n * @param property {string|string[]} - The property name to get (as an array or '.' delimited string)\n * @return value {*} - Property value, including undefined if not defined.\n */\n\nvar getImpl = function (object, property) {\n  var t = this,\n      elems = Array.isArray(property) ? property : property.split('.'),\n      name = elems[0],\n      value = object[name];\n\n  if (elems.length <= 1) {\n    return value;\n  } // Note that typeof null === 'object'\n\n\n  if (value === null || typeof value !== 'object') {\n    return undefined;\n  }\n\n  return getImpl(value, elems.slice(1));\n};\n/**\n * <p>Get a configuration value</p>\n *\n * <p>\n * This will return the specified property value, throwing an exception if the\n * configuration isn't defined.  It is used to assure configurations are defined\n * before being used, and to prevent typos.\n * </p>\n *\n * @method get\n * @param property {string} - The configuration property to get. Can include '.' sub-properties.\n * @return value {*} - The property value\n */\n\n\nConfig.prototype.get = function (property) {\n  if (property === null || property === undefined) {\n    throw new Error(\"Calling config.get with null or undefined argument\");\n  } // Make configurations immutable after first get (unless disabled)\n\n\n  if (checkMutability) {\n    if (!util.initParam('ALLOW_CONFIG_MUTATIONS', false)) {\n      util.makeImmutable(config);\n    }\n\n    checkMutability = false;\n  }\n\n  var t = this,\n      value = getImpl(t, property); // Produce an exception if the property doesn't exist\n\n  if (value === undefined) {\n    throw new Error('Configuration property \"' + property + '\" is not defined');\n  } // Return the value\n\n\n  return value;\n};\n/**\n * Test that a configuration parameter exists\n *\n * <pre>\n *    var config = require('config');\n *    if (config.has('customer.dbName')) {\n *      console.log('Customer database name: ' + config.customer.dbName);\n *    }\n * </pre>\n *\n * @method has\n * @param property {string} - The configuration property to test. Can include '.' sub-properties.\n * @return isPresent {boolean} - True if the property is defined, false if not defined.\n */\n\n\nConfig.prototype.has = function (property) {\n  // While get() throws an exception for undefined input, has() is designed to test validity, so false is appropriate\n  if (property === null || property === undefined) {\n    return false;\n  }\n\n  var t = this;\n  return getImpl(t, property) !== undefined;\n};\n/**\n * <p>\n * Set default configurations for a node.js module.\n * </p>\n *\n * <p>\n * This allows module developers to attach their configurations onto the\n * default configuration object so they can be configured by the consumers\n * of the module.\n * </p>\n *\n * <p>Using the function within your module:</p>\n * <pre>\n *   var CONFIG = require(\"config\");\n *   CONFIG.util.setModuleDefaults(\"MyModule\", {\n *   &nbsp;&nbsp;templateName: \"t-50\",\n *   &nbsp;&nbsp;colorScheme: \"green\"\n *   });\n * <br>\n *   // Template name may be overridden by application config files\n *   console.log(\"Template: \" + CONFIG.MyModule.templateName);\n * </pre>\n *\n * <p>\n * The above example results in a \"MyModule\" element of the configuration\n * object, containing an object with the specified default values.\n * </p>\n *\n * @method setModuleDefaults\n * @param moduleName {string} - Name of your module.\n * @param defaultProperties {object} - The default module configuration.\n * @return moduleConfig {object} - The module level configuration object.\n */\n\n\nutil.setModuleDefaults = function (moduleName, defaultProperties) {\n  // Copy the properties into a new object\n  var t = this,\n      moduleConfig = util.cloneDeep(defaultProperties); // Set module defaults into the first sources element\n\n  if (configSources.length === 0 || configSources[0].name !== 'Module Defaults') {\n    configSources.splice(0, 0, {\n      name: 'Module Defaults',\n      parsed: {}\n    });\n  }\n\n  util.setPath(configSources[0].parsed, moduleName.split('.'), {});\n  util.extendDeep(getImpl(configSources[0].parsed, moduleName), defaultProperties); // Create a top level config for this module if it doesn't exist\n\n  util.setPath(t, moduleName.split('.'), getImpl(t, moduleName) || {}); // Extend local configurations into the module config\n\n  util.extendDeep(moduleConfig, getImpl(t, moduleName)); // Merge the extended configs without replacing the original\n\n  util.extendDeep(getImpl(t, moduleName), moduleConfig); // reset the mutability check for \"config.get\" method.\n  // we are not making t[moduleName] immutable immediately,\n  // since there might be more modifications before the first config.get\n\n  if (!util.initParam('ALLOW_CONFIG_MUTATIONS', false)) {\n    checkMutability = true;\n  } // Attach handlers & watchers onto the module config object\n\n\n  return util.attachProtoDeep(getImpl(t, moduleName));\n};\n/**\n * <p>Make a configuration property hidden so it doesn't appear when enumerating\n * elements of the object.</p>\n *\n * <p>\n * The property still exists and can be read from and written to, but it won't\n * show up in for ... in loops, Object.keys(), or JSON.stringify() type methods.\n * </p>\n *\n * <p>\n * If the property already exists, it will be made hidden.  Otherwise it will\n * be created as a hidden property with the specified value.\n * </p>\n *\n * <p><i>\n * This method was built for hiding configuration values, but it can be applied\n * to <u>any</u> javascript object.\n * </i></p>\n *\n * <p>Example:</p>\n * <pre>\n *   var CONFIG = require('config');\n *   ...\n *\n *   // Hide the Amazon S3 credentials\n *   CONFIG.util.makeHidden(CONFIG.amazonS3, 'access_id');\n *   CONFIG.util.makeHidden(CONFIG.amazonS3, 'secret_key');\n * </pre>\n *\n * @method makeHidden\n * @param object {object} - The object to make a hidden property into.\n * @param property {string} - The name of the property to make hidden.\n * @param value {*} - (optional) Set the property value to this (otherwise leave alone)\n * @return object {object} - The original object is returned - for chaining.\n */\n\n\nutil.makeHidden = function (object, property, value) {\n  // If the new value isn't specified, just mark the property as hidden\n  if (typeof value === 'undefined') {\n    Object.defineProperty(object, property, {\n      enumerable: false\n    });\n  } // Otherwise set the value and mark it as hidden\n  else {\n      Object.defineProperty(object, property, {\n        value: value,\n        enumerable: false\n      });\n    }\n\n  return object;\n};\n/**\n * <p>Make a javascript object property immutable (assuring it cannot be changed\n * from the current value).</p>\n * <p>\n * If the specified property is an object, all attributes of that object are\n * made immutable, including properties of contained objects, recursively.\n * If a property name isn't supplied, all properties of the object are made\n * immutable.\n * </p>\n * <p>\n *\n * </p>\n * <p>\n * New properties can be added to the object and those properties will not be\n * immutable unless this method is called on those new properties.\n * </p>\n * <p>\n * This operation cannot be undone.\n * </p>\n *\n * <p>Example:</p>\n * <pre>\n *   var config = require('config');\n *   var myObject = {hello:'world'};\n *   config.util.makeImmutable(myObject);\n * </pre>\n *\n * @method makeImmutable\n * @param object {object} - The object to specify immutable properties for\n * @param [property] {string | [string]} - The name of the property (or array of names) to make immutable.\n *        If not provided, all owned properties of the object are made immutable.\n * @param [value] {* | [*]} - Property value (or array of values) to set\n *        the property to before making immutable. Only used when setting a single\n *        property. Retained for backward compatibility.\n * @return object {object} - The original object is returned - for chaining.\n */\n\n\nutil.makeImmutable = function (object, property, value) {\n  var properties = null; // Backwards compatibility mode where property/value can be specified\n\n  if (typeof property === 'string') {\n    return Object.defineProperty(object, property, {\n      value: typeof value === 'undefined' ? object[property] : value,\n      writable: false,\n      configurable: false\n    });\n  } // Get the list of properties to work with\n\n\n  if (Array.isArray(property)) {\n    properties = property;\n  } else {\n    properties = Object.keys(object);\n  } // Process each property\n\n\n  for (var i = 0; i < properties.length; i++) {\n    var propertyName = properties[i],\n        value = object[propertyName];\n\n    if (value instanceof RawConfig) {\n      Object.defineProperty(object, propertyName, {\n        value: value.resolve(),\n        writable: false,\n        configurable: false\n      });\n    } else if (Array.isArray(value)) {\n      // Ensure object items of this array are also immutable.\n      value.forEach((item, index) => {\n        if (util.isObject(item) || Array.isArray(item)) util.makeImmutable(item);\n      });\n      Object.defineProperty(object, propertyName, {\n        value: Object.freeze(value)\n      });\n    } else {\n      Object.defineProperty(object, propertyName, {\n        value: value,\n        writable: false,\n        configurable: false\n      }); // Ensure new properties can not be added.\n\n      Object.preventExtensions(object); // Call recursively if an object.\n\n      if (util.isObject(value)) {\n        util.makeImmutable(value);\n      }\n    }\n  }\n\n  return object;\n};\n/**\n * Return the sources for the configurations\n *\n * <p>\n * All sources for configurations are stored in an array of objects containing\n * the source name (usually the filename), the original source (as a string),\n * and the parsed source as an object.\n * </p>\n *\n * @method getConfigSources\n * @return configSources {Array[Object]} - An array of objects containing\n *    name, original, and parsed elements\n */\n\n\nutil.getConfigSources = function () {\n  var t = this;\n  return configSources.slice(0);\n};\n/**\n * Load the individual file configurations.\n *\n * <p>\n * This method builds a map of filename to the configuration object defined\n * by the file.  The search order is:\n * </p>\n *\n * <pre>\n *   default.EXT\n *   (deployment).EXT\n *   (hostname).EXT\n *   (hostname)-(deployment).EXT\n *   local.EXT\n *   local-(deployment).EXT\n *   runtime.json\n * </pre>\n *\n * <p>\n * EXT can be yml, yaml, coffee, iced, json, cson or js signifying the file type.\n * yaml (and yml) is in YAML format, coffee is a coffee-script, iced is iced-coffee-script,\n * json is in JSON format, cson is in CSON format, properties is in .properties format\n * (http://en.wikipedia.org/wiki/.properties), and js is a javascript executable file that is\n * require()'d with module.exports being the config object.\n * </p>\n *\n * <p>\n * hostname is the $HOST environment variable (or --HOST command line parameter)\n * if set, otherwise the $HOSTNAME environment variable (or --HOSTNAME command\n * line parameter) if set, otherwise the hostname found from\n * require('os').hostname().\n * </p>\n *\n * <p>\n * Once a hostname is found, everything from the first period ('.') onwards\n * is removed. For example, abc.example.com becomes abc\n * </p>\n *\n * <p>\n * (deployment) is the deployment type, found in the $NODE_ENV environment\n * variable (which can be overriden by using $NODE_CONFIG_ENV\n * environment variable). Defaults to 'development'.\n * </p>\n *\n * <p>\n * The runtime.json file contains configuration changes made at runtime either\n * manually, or by the application setting a configuration value.\n * </p>\n *\n * <p>\n * If the $NODE_APP_INSTANCE environment variable (or --NODE_APP_INSTANCE\n * command line parameter) is set, then files with this appendage will be loaded.\n * See the Multiple Application Instances section of the main documentaion page\n * for more information.\n * </p>\n *\n * @protected\n * @method loadFileConfigs\n * @return config {Object} The configuration object\n */\n\n\nutil.loadFileConfigs = function (configDir) {\n  // Initialize\n  var t = this,\n      config = {}; // Initialize parameters from command line, environment, or default\n\n  NODE_ENV = util.initParam('NODE_ENV', 'development'); // Override, NODE_ENV if NODE_CONFIG_ENV is specified.\n\n  NODE_ENV = util.initParam('NODE_CONFIG_ENV', NODE_ENV); // Split files name, for loading multiple files.\n\n  NODE_ENV = NODE_ENV.split(',');\n  CONFIG_DIR = configDir || util.initParam('NODE_CONFIG_DIR', Path.join(process.cwd(), 'config'));\n\n  if (CONFIG_DIR.indexOf('.') === 0) {\n    CONFIG_DIR = Path.join(process.cwd(), CONFIG_DIR);\n  }\n\n  APP_INSTANCE = util.initParam('NODE_APP_INSTANCE');\n  HOST = util.initParam('HOST');\n  HOSTNAME = util.initParam('HOSTNAME');\n  CONFIG_SKIP_GITCRYPT = util.initParam('CONFIG_SKIP_GITCRYPT'); // This is for backward compatibility\n\n  RUNTIME_JSON_FILENAME = util.initParam('NODE_CONFIG_RUNTIME_JSON', Path.join(CONFIG_DIR, 'runtime.json'));\n  NODE_CONFIG_PARSER = util.initParam('NODE_CONFIG_PARSER');\n\n  if (NODE_CONFIG_PARSER) {\n    try {\n      var parserModule = Path.isAbsolute(NODE_CONFIG_PARSER) ? NODE_CONFIG_PARSER : Path.join(CONFIG_DIR, NODE_CONFIG_PARSER);\n      Parser = require(parserModule);\n    } catch (e) {\n      console.warn('Failed to load config parser from ' + NODE_CONFIG_PARSER);\n      console.log(e);\n    }\n  } // Determine the host name from the OS module, $HOST, or $HOSTNAME\n  // Remove any . appendages, and default to null if not set\n\n\n  try {\n    var hostName = HOST || HOSTNAME;\n\n    if (!hostName) {\n      var OS = require('os');\n\n      hostName = OS.hostname();\n    }\n  } catch (e) {\n    hostName = '';\n  } // Store the hostname that won.\n\n\n  env.HOSTNAME = hostName; // Read each file in turn\n\n  var baseNames = ['default'].concat(NODE_ENV); // #236: Also add full hostname when they are different.\n\n  if (hostName) {\n    var firstDomain = hostName.split('.')[0];\n    NODE_ENV.forEach(function (env) {\n      // Backward compatibility\n      baseNames.push(firstDomain, firstDomain + '-' + env); // Add full hostname when it is not the same\n\n      if (hostName !== firstDomain) {\n        baseNames.push(hostName, hostName + '-' + env);\n      }\n    });\n  }\n\n  NODE_ENV.forEach(function (env) {\n    baseNames.push('local', 'local-' + env);\n  });\n  var allowedFiles = {};\n  var resolutionIndex = 1;\n  var extNames = Parser.getFilesOrder();\n  baseNames.forEach(function (baseName) {\n    extNames.forEach(function (extName) {\n      allowedFiles[baseName + '.' + extName] = resolutionIndex++;\n\n      if (APP_INSTANCE) {\n        allowedFiles[baseName + '-' + APP_INSTANCE + '.' + extName] = resolutionIndex++;\n      }\n    });\n  });\n  var locatedFiles = util.locateMatchingFiles(CONFIG_DIR, allowedFiles);\n  locatedFiles.forEach(function (fullFilename) {\n    var configObj = util.parseFile(fullFilename);\n\n    if (configObj) {\n      util.extendDeep(config, configObj);\n    }\n  }); // Override configurations from the $NODE_CONFIG environment variable\n  // NODE_CONFIG only applies to the base config\n\n  if (!configDir) {\n    var envConfig = {};\n\n    if (process.env.NODE_CONFIG) {\n      try {\n        envConfig = JSON.parse(process.env.NODE_CONFIG);\n      } catch (e) {\n        console.error('The $NODE_CONFIG environment variable is malformed JSON');\n      }\n\n      util.extendDeep(config, envConfig);\n      configSources.push({\n        name: \"$NODE_CONFIG\",\n        parsed: envConfig\n      });\n    } // Override configurations from the --NODE_CONFIG command line\n\n\n    var cmdLineConfig = util.getCmdLineArg('NODE_CONFIG');\n\n    if (cmdLineConfig) {\n      try {\n        cmdLineConfig = JSON.parse(cmdLineConfig);\n      } catch (e) {\n        console.error('The --NODE_CONFIG={json} command line argument is malformed JSON');\n      }\n\n      util.extendDeep(config, cmdLineConfig);\n      configSources.push({\n        name: \"--NODE_CONFIG argument\",\n        parsed: cmdLineConfig\n      });\n    } // Place the mixed NODE_CONFIG into the environment\n\n\n    env['NODE_CONFIG'] = JSON.stringify(util.extendDeep(envConfig, cmdLineConfig, {}));\n  } // Override with environment variables if there is a custom-environment-variables.EXT mapping file\n\n\n  var customEnvVars = util.getCustomEnvVars(CONFIG_DIR, extNames);\n  util.extendDeep(config, customEnvVars); // Extend the original config with the contents of runtime.json (backwards compatibility)\n\n  var runtimeJson = util.parseFile(RUNTIME_JSON_FILENAME) || {};\n  util.extendDeep(config, runtimeJson);\n  util.resolveDeferredConfigs(config); // Return the configuration object\n\n  return config;\n};\n/**\n * Return a list of fullFilenames who exists in allowedFiles\n * Ordered according to allowedFiles argument specifications\n *\n * @protected\n * @method locateMatchingFiles\n * @param configDirs {string}   the config dir, or multiple dirs separated by a column (:)\n * @param allowedFiles {object} an object. keys and supported filenames\n *                              and values are the position in the resolution order\n * @returns {string[]}          fullFilenames - path + filename\n */\n\n\nutil.locateMatchingFiles = function (configDirs, allowedFiles) {\n  return configDirs.split(':').reduce(function (files, configDir) {\n    if (configDir) {\n      try {\n        FileSystem.readdirSync(configDir).forEach(function (file) {\n          if (allowedFiles[file]) {\n            files.push([allowedFiles[file], Path.join(configDir, file)]);\n          }\n        });\n      } catch (e) {}\n\n      return files;\n    }\n  }, []).sort(function (a, b) {\n    return a[0] - b[0];\n  }).map(function (file) {\n    return file[1];\n  });\n}; // Using basic recursion pattern, find all the deferred values and resolve them.\n\n\nutil.resolveDeferredConfigs = function (config) {\n  var deferred = [];\n\n  function _iterate(prop) {\n    // We put the properties we are going to look it in an array to keep the order predictable\n    var propsToSort = []; // First step is to put the properties of interest in an array\n\n    for (var property in prop) {\n      if (prop.hasOwnProperty(property) && prop[property] != null) {\n        propsToSort.push(property);\n      }\n    } // Second step is to iterate of the elements in a predictable (sorted) order\n\n\n    propsToSort.sort().forEach(function (property) {\n      if (prop[property].constructor === Object) {\n        _iterate(prop[property]);\n      } else if (prop[property].constructor === Array) {\n        for (var i = 0; i < prop[property].length; i++) {\n          if (prop[property][i] instanceof DeferredConfig) {\n            deferred.push(prop[property][i].prepare(config, prop[property], i));\n          } else {\n            _iterate(prop[property][i]);\n          }\n        }\n      } else {\n        if (prop[property] instanceof DeferredConfig) {\n          deferred.push(prop[property].prepare(config, prop, property));\n        } // else: Nothing to do. Keep the property how it is.\n\n      }\n    });\n  }\n\n  _iterate(config);\n\n  deferred.forEach(function (defer) {\n    defer.resolve();\n  });\n};\n/**\n * Parse and return the specified configuration file.\n *\n * If the file exists in the application config directory, it will\n * parse and return it as a JavaScript object.\n *\n * The file extension determines the parser to use.\n *\n * .js = File to run that has a module.exports containing the config object\n * .coffee = File to run that has a module.exports with coffee-script containing the config object\n * .iced = File to run that has a module.exports with iced-coffee-script containing the config object\n * All other supported file types (yaml, toml, json, cson, hjson, json5, properties, xml)\n * are parsed with util.parseString.\n *\n * If the file doesn't exist, a null will be returned.  If the file can't be\n * parsed, an exception will be thrown.\n *\n * This method performs synchronous file operations, and should not be called\n * after synchronous module loading.\n *\n * @protected\n * @method parseFile\n * @param fullFilename {string} The full file path and name\n * @return configObject {object|null} The configuration object parsed from the file\n */\n\n\nutil.parseFile = function (fullFilename) {\n  var t = this,\n      // Initialize\n  configObject = null,\n      fileContent = null,\n      stat = null; // Note that all methods here are the Sync versions.  This is appropriate during\n  // module loading (which is a synchronous operation), but not thereafter.\n\n  try {\n    // Try loading the file.\n    fileContent = FileSystem.readFileSync(fullFilename, 'utf-8');\n    fileContent = fileContent.replace(/^\\uFEFF/, '');\n  } catch (e2) {\n    if (e2.code !== 'ENOENT') {\n      throw new Error('Config file ' + fullFilename + ' cannot be read');\n    }\n\n    return null; // file doesn't exists\n  } // Parse the file based on extension\n\n\n  try {\n    // skip if it's a gitcrypt file and CONFIG_SKIP_GITCRYPT is true\n    if (CONFIG_SKIP_GITCRYPT) {\n      if (gitCryptTestRegex.test(fileContent)) {\n        console.error('WARNING: ' + fullFilename + ' is a git-crypt file and CONFIG_SKIP_GITCRYPT is set. skipping.');\n        return null;\n      }\n    }\n\n    configObject = Parser.parse(fullFilename, fileContent);\n  } catch (e3) {\n    if (gitCryptTestRegex.test(fileContent)) {\n      console.error('ERROR: ' + fullFilename + ' is a git-crypt file and CONFIG_SKIP_GITCRYPT is not set.');\n    }\n\n    throw new Error(\"Cannot parse config file: '\" + fullFilename + \"': \" + e3);\n  } // Keep track of this configuration sources, including empty ones\n\n\n  if (typeof configObject === 'object') {\n    configSources.push({\n      name: fullFilename,\n      original: fileContent,\n      parsed: configObject\n    });\n  }\n\n  return configObject;\n};\n/**\n * Parse and return the specied string with the specified format.\n *\n * The format determines the parser to use.\n *\n * json = File is parsed using JSON.parse()\n * yaml (or yml) = Parsed with a YAML parser\n * toml = Parsed with a TOML parser\n * cson = Parsed with a CSON parser\n * hjson = Parsed with a HJSON parser\n * json5 = Parsed with a JSON5 parser\n * properties = Parsed with the 'properties' node package\n * xml = Parsed with a XML parser\n *\n * If the file doesn't exist, a null will be returned.  If the file can't be\n * parsed, an exception will be thrown.\n *\n * This method performs synchronous file operations, and should not be called\n * after synchronous module loading.\n *\n * @protected\n * @method parseString\n * @param content {string} The full content\n * @param format {string} The format to be parsed\n * @return {configObject} The configuration object parsed from the string\n */\n\n\nutil.parseString = function (content, format) {\n  var parser = Parser.getParser(format);\n\n  if (typeof parser === 'function') {\n    return parser(null, content);\n  }\n};\n/**\n * Attach the Config class prototype to all config objects recursively.\n *\n * <p>\n * This allows you to do anything with CONFIG sub-objects as you can do with\n * the top-level CONFIG object.  It's so you can do this:\n * </p>\n *\n * <pre>\n *   var CUST_CONFIG = require('config').Customer;\n *   CUST_CONFIG.get(...)\n * </pre>\n *\n * @protected\n * @method attachProtoDeep\n * @param toObject\n * @param depth\n * @return toObject\n */\n\n\nutil.attachProtoDeep = function (toObject, depth) {\n  if (toObject instanceof RawConfig) {\n    return toObject;\n  } // Recursion detection\n\n\n  var t = this;\n  depth = depth === null ? DEFAULT_CLONE_DEPTH : depth;\n\n  if (depth < 0) {\n    return toObject;\n  } // Adding Config.prototype methods directly to toObject as hidden properties\n  // because adding to toObject.__proto__ exposes the function in toObject\n\n\n  for (var fnName in Config.prototype) {\n    if (!toObject[fnName]) {\n      util.makeHidden(toObject, fnName, Config.prototype[fnName]);\n    }\n  } // Add prototypes to sub-objects\n\n\n  for (var prop in toObject) {\n    if (util.isObject(toObject[prop])) {\n      util.attachProtoDeep(toObject[prop], depth - 1);\n    }\n  } // Return the original object\n\n\n  return toObject;\n};\n/**\n * Return a deep copy of the specified object.\n *\n * This returns a new object with all elements copied from the specified\n * object.  Deep copies are made of objects and arrays so you can do anything\n * with the returned object without affecting the input object.\n *\n * @protected\n * @method cloneDeep\n * @param parent {object} The original object to copy from\n * @param [depth=20] {Integer} Maximum depth (default 20)\n * @return {object} A new object with the elements copied from the copyFrom object\n *\n * This method is copied from https://github.com/pvorb/node-clone/blob/17eea36140d61d97a9954c53417d0e04a00525d9/clone.js\n *\n * Copyright © 2011-2014 Paul Vorbach and contributors.\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the “Software”), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\n * of the Software, and to permit persons to whom the Software is furnished to do so,\n * subject to the following conditions: The above copyright notice and this permission\n * notice shall be included in all copies or substantial portions of the Software.\n */\n\n\nutil.cloneDeep = function cloneDeep(parent, depth, circular, prototype) {\n  // maintain two arrays for circular references, where corresponding parents\n  // and children have the same index\n  var allParents = [];\n  var allChildren = [];\n  var useBuffer = typeof Buffer != 'undefined';\n  if (typeof circular === 'undefined') circular = true;\n  if (typeof depth === 'undefined') depth = 20; // recurse this function so we don't reset allParents and allChildren\n\n  function _clone(parent, depth) {\n    // cloning null always returns null\n    if (parent === null) return null;\n    if (depth === 0) return parent;\n    var child;\n\n    if (typeof parent != 'object') {\n      return parent;\n    }\n\n    if (Utils.isArray(parent)) {\n      child = [];\n    } else if (Utils.isRegExp(parent)) {\n      child = new RegExp(parent.source, util.getRegExpFlags(parent));\n      if (parent.lastIndex) child.lastIndex = parent.lastIndex;\n    } else if (Utils.isDate(parent)) {\n      child = new Date(parent.getTime());\n    } else if (useBuffer && Buffer.isBuffer(parent)) {\n      child = new Buffer(parent.length);\n      parent.copy(child);\n      return child;\n    } else {\n      if (typeof prototype === 'undefined') child = Object.create(Object.getPrototypeOf(parent));else child = Object.create(prototype);\n    }\n\n    if (circular) {\n      var index = allParents.indexOf(parent);\n\n      if (index != -1) {\n        return allChildren[index];\n      }\n\n      allParents.push(parent);\n      allChildren.push(child);\n    }\n\n    for (var i in parent) {\n      var propDescriptor = Object.getOwnPropertyDescriptor(parent, i);\n      var hasGetter = propDescriptor !== undefined && propDescriptor.get !== undefined;\n\n      if (hasGetter) {\n        Object.defineProperty(child, i, propDescriptor);\n      } else if (util.isPromise(parent[i])) {\n        child[i] = parent[i];\n      } else {\n        child[i] = _clone(parent[i], depth - 1);\n      }\n    }\n\n    return child;\n  }\n\n  return _clone(parent, depth);\n};\n/**\n * Set objects given a path as a string list\n *\n * @protected\n * @method setPath\n * @param object {object} - Object to set the property on\n * @param path {array[string]} - Array path to the property\n * @param value {*} - value to set, ignoring null\n */\n\n\nutil.setPath = function (object, path, value) {\n  var nextKey = null;\n\n  if (value === null || path.length === 0) {\n    return;\n  } else if (path.length === 1) {\n    // no more keys to make, so set the value\n    object[path.shift()] = value;\n  } else {\n    nextKey = path.shift();\n\n    if (!object.hasOwnProperty(nextKey)) {\n      object[nextKey] = {};\n    }\n\n    util.setPath(object[nextKey], path, value);\n  }\n};\n/**\n * Create a new object patterned after substitutionMap, where:\n * 1. Terminal string values in substitutionMap are used as keys\n * 2. To look up values in a key-value store, variables\n * 3. And parent keys are created as necessary to retain the structure of substitutionMap.\n *\n * @protected\n * @method substituteDeep\n * @param substitionMap {object} - an object whose terminal (non-subobject) values are strings\n * @param variables {object[string:value]} - usually process.env, a flat object used to transform\n *      terminal values in a copy of substititionMap.\n * @returns {object} - deep copy of substitutionMap with only those paths whose terminal values\n *      corresponded to a key in `variables`\n */\n\n\nutil.substituteDeep = function (substitutionMap, variables) {\n  var result = {};\n\n  function _substituteVars(map, vars, pathTo) {\n    for (var prop in map) {\n      var value = map[prop];\n\n      if (typeof value === 'string') {\n        // We found a leaf variable name\n        if (vars[value]) {\n          // if the vars provide a value set the value in the result map\n          util.setPath(result, pathTo.concat(prop), vars[value]);\n        }\n      } else if (util.isObject(value)) {\n        // work on the subtree, giving it a clone of the pathTo\n        if ('__name' in value && '__format' in value && vars[value.__name]) {\n          var parsedValue = util.parseString(vars[value.__name], value.__format);\n          util.setPath(result, pathTo.concat(prop), parsedValue);\n        } else {\n          _substituteVars(value, vars, pathTo.concat(prop));\n        }\n      } else {\n        msg = \"Illegal key type for substitution map at \" + pathTo.join('.') + ': ' + typeof value;\n        throw Error(msg);\n      }\n    }\n  }\n\n  _substituteVars(substitutionMap, variables, []);\n\n  return result;\n};\n/* Map environment variables into the configuration if a mapping file,\n * `custom-environment-variables.EXT` exists.\n *\n * @protected\n * @method getCustomEnvVars\n * @param CONFIG_DIR {string} - the passsed configuration directory\n * @param extNames {Array[string]} - acceptable configuration file extension names.\n * @returns {object} - mapped environment variables or {} if there are none\n */\n\n\nutil.getCustomEnvVars = function (CONFIG_DIR, extNames) {\n  var result = {};\n  extNames.forEach(function (extName) {\n    var fullFilename = Path.join(CONFIG_DIR, 'custom-environment-variables' + '.' + extName);\n    var configObj = util.parseFile(fullFilename);\n\n    if (configObj) {\n      var environmentSubstitutions = util.substituteDeep(configObj, process.env);\n      util.extendDeep(result, environmentSubstitutions);\n    }\n  });\n  return result;\n};\n/**\n * Return true if two objects have equal contents.\n *\n * @protected\n * @method equalsDeep\n * @param object1 {object} The object to compare from\n * @param object2 {object} The object to compare with\n * @param depth {integer} An optional depth to prevent recursion.  Default: 20.\n * @return {boolean} True if both objects have equivalent contents\n */\n\n\nutil.equalsDeep = function (object1, object2, depth) {\n  // Recursion detection\n  var t = this;\n  depth = depth === null ? DEFAULT_CLONE_DEPTH : depth;\n\n  if (depth < 0) {\n    return {};\n  } // Fast comparisons\n\n\n  if (!object1 || !object2) {\n    return false;\n  }\n\n  if (object1 === object2) {\n    return true;\n  }\n\n  if (typeof object1 != 'object' || typeof object2 != 'object') {\n    return false;\n  } // They must have the same keys.  If their length isn't the same\n  // then they're not equal.  If the keys aren't the same, the value\n  // comparisons will fail.\n\n\n  if (Object.keys(object1).length != Object.keys(object2).length) {\n    return false;\n  } // Compare the values\n\n\n  for (var prop in object1) {\n    // Call recursively if an object or array\n    if (object1[prop] && typeof object1[prop] === 'object') {\n      if (!util.equalsDeep(object1[prop], object2[prop], depth - 1)) {\n        return false;\n      }\n    } else {\n      if (object1[prop] !== object2[prop]) {\n        return false;\n      }\n    }\n  } // Test passed.\n\n\n  return true;\n};\n/**\n * Returns an object containing all elements that differ between two objects.\n * <p>\n * This method was designed to be used to create the runtime.json file\n * contents, but can be used to get the diffs between any two Javascript objects.\n * </p>\n * <p>\n * It works best when object2 originated by deep copying object1, then\n * changes were made to object2, and you want an object that would give you\n * the changes made to object1 which resulted in object2.\n * </p>\n *\n * @protected\n * @method diffDeep\n * @param object1 {object} The base object to compare to\n * @param object2 {object} The object to compare with\n * @param depth {integer} An optional depth to prevent recursion.  Default: 20.\n * @return {object} A differential object, which if extended onto object1 would\n *                  result in object2.\n */\n\n\nutil.diffDeep = function (object1, object2, depth) {\n  // Recursion detection\n  var t = this,\n      diff = {};\n  depth = depth === null ? DEFAULT_CLONE_DEPTH : depth;\n\n  if (depth < 0) {\n    return {};\n  } // Process each element from object2, adding any element that's different\n  // from object 1.\n\n\n  for (var parm in object2) {\n    var value1 = object1[parm];\n    var value2 = object2[parm];\n\n    if (value1 && value2 && util.isObject(value2)) {\n      if (!util.equalsDeep(value1, value2)) {\n        diff[parm] = util.diffDeep(value1, value2, depth - 1);\n      }\n    } else if (Array.isArray(value1) && Array.isArray(value2)) {\n      if (!util.equalsDeep(value1, value2)) {\n        diff[parm] = value2;\n      }\n    } else if (value1 !== value2) {\n      diff[parm] = value2;\n    }\n  } // Return the diff object\n\n\n  return diff;\n};\n/**\n * Extend an object, and any object it contains.\n *\n * This does not replace deep objects, but dives into them\n * replacing individual elements instead.\n *\n * @protected\n * @method extendDeep\n * @param mergeInto {object} The object to merge into\n * @param mergeFrom... {object...} - Any number of objects to merge from\n * @param depth {integer} An optional depth to prevent recursion.  Default: 20.\n * @return {object} The altered mergeInto object is returned\n */\n\n\nutil.extendDeep = function (mergeInto) {\n  // Initialize\n  var t = this;\n  var vargs = Array.prototype.slice.call(arguments, 1);\n  var depth = vargs.pop();\n\n  if (typeof depth != 'number') {\n    vargs.push(depth);\n    depth = DEFAULT_CLONE_DEPTH;\n  } // Recursion detection\n\n\n  if (depth < 0) {\n    return mergeInto;\n  } // Cycle through each object to extend\n\n\n  vargs.forEach(function (mergeFrom) {\n    // Cycle through each element of the object to merge from\n    for (var prop in mergeFrom) {\n      // save original value in deferred elements\n      var fromIsDeferredFunc = mergeFrom[prop] instanceof DeferredConfig;\n      var isDeferredFunc = mergeInto[prop] instanceof DeferredConfig;\n\n      if (fromIsDeferredFunc && mergeInto.hasOwnProperty(prop)) {\n        mergeFrom[prop]._original = isDeferredFunc ? mergeInto[prop]._original : mergeInto[prop];\n      } // Extend recursively if both elements are objects and target is not really a deferred function\n\n\n      if (mergeFrom[prop] instanceof Date) {\n        mergeInto[prop] = mergeFrom[prop];\n      }\n\n      if (mergeFrom[prop] instanceof RegExp) {\n        mergeInto[prop] = mergeFrom[prop];\n      } else if (util.isObject(mergeInto[prop]) && util.isObject(mergeFrom[prop]) && !isDeferredFunc) {\n        util.extendDeep(mergeInto[prop], mergeFrom[prop], depth - 1);\n      } else if (util.isPromise(mergeFrom[prop])) {\n        mergeInto[prop] = mergeFrom[prop];\n      } // Copy recursively if the mergeFrom element is an object (or array or fn)\n      else if (mergeFrom[prop] && typeof mergeFrom[prop] === 'object') {\n          mergeInto[prop] = util.cloneDeep(mergeFrom[prop], depth - 1);\n        } // Copy property descriptor otherwise, preserving accessors\n        else if (Object.getOwnPropertyDescriptor(Object(mergeFrom), prop)) {\n            Object.defineProperty(mergeInto, prop, Object.getOwnPropertyDescriptor(Object(mergeFrom), prop));\n          } else {\n            mergeInto[prop] = mergeFrom[prop];\n          }\n    }\n  }); // Chain\n\n  return mergeInto;\n};\n/**\n * Is the specified argument a regular javascript object?\n *\n * The argument is an object if it's a JS object, but not an array.\n *\n * @protected\n * @method isObject\n * @param obj {*} An argument of any type.\n * @return {boolean} TRUE if the arg is an object, FALSE if not\n */\n\n\nutil.isObject = function (obj) {\n  return obj !== null && typeof obj === 'object' && !Array.isArray(obj);\n};\n/**\n * Is the specified argument a javascript promise?\n *\n * @protected\n * @method isPromise\n * @param obj {*} An argument of any type.\n * @returns {boolean}\n */\n\n\nutil.isPromise = function (obj) {\n  return util.isObject(obj) && obj.toString() === '[object Promise]';\n};\n/**\n * <p>Initialize a parameter from the command line or process environment</p>\n *\n * <p>\n * This method looks for the parameter from the command line in the format\n * --PARAMETER=VALUE, then from the process environment, then from the\n * default specified as an argument.\n * </p>\n *\n * @method initParam\n * @param paramName {String} Name of the parameter\n * @param [defaultValue] {Any} Default value of the parameter\n * @return {Any} The found value, or default value\n */\n\n\nutil.initParam = function (paramName, defaultValue) {\n  var t = this; // Record and return the value\n\n  var value = util.getCmdLineArg(paramName) || process.env[paramName] || defaultValue;\n  env[paramName] = value;\n  return value;\n};\n/**\n * <p>Get Command Line Arguments</p>\n *\n * <p>\n * This method allows you to retrieve the value of the specified command line argument.\n * </p>\n *\n * <p>\n * The argument is case sensitive, and must be of the form '--ARG_NAME=value'\n * </p>\n *\n * @method getCmdLineArg\n * @param searchFor {String} The argument name to search for\n * @return {*} false if the argument was not found, the argument value if found\n */\n\n\nutil.getCmdLineArg = function (searchFor) {\n  var cmdLineArgs = process.argv.slice(2, process.argv.length),\n      argName = '--' + searchFor + '=';\n\n  for (var argvIt = 0; argvIt < cmdLineArgs.length; argvIt++) {\n    if (cmdLineArgs[argvIt].indexOf(argName) === 0) {\n      return cmdLineArgs[argvIt].substr(argName.length);\n    }\n  }\n\n  return false;\n};\n/**\n * <p>Get a Config Environment Variable Value</p>\n *\n * <p>\n * This method returns the value of the specified config environment variable,\n * including any defaults or overrides.\n * </p>\n *\n * @method getEnv\n * @param varName {String} The environment variable name\n * @return {String} The value of the environment variable\n */\n\n\nutil.getEnv = function (varName) {\n  return env[varName];\n};\n/**\n * Returns a string of flags for regular expression `re`.\n *\n * @param {RegExp} re Regular expression\n * @returns {string} Flags\n */\n\n\nutil.getRegExpFlags = function (re) {\n  var flags = '';\n  re.global && (flags += 'g');\n  re.ignoreCase && (flags += 'i');\n  re.multiline && (flags += 'm');\n  return flags;\n};\n/**\n * Returns a new deep copy of the current config object, or any part of the config if provided.\n *\n * @param {Object} config The part of the config to copy and serialize. Omit this argument to return the entire config.\n * @returns {Object} The cloned config or part of the config\n */\n\n\nutil.toObject = function (config) {\n  return JSON.parse(JSON.stringify(config || this));\n}; // Run strictness checks on NODE_ENV and NODE_APP_INSTANCE and throw an error if there's a problem.\n\n\nutil.runStrictnessChecks = function (config) {\n  var sources = config.util.getConfigSources();\n  var sourceFilenames = sources.map(function (src) {\n    return Path.basename(src.name);\n  });\n  NODE_ENV.forEach(function (env) {\n    // Throw an exception if there's no explicit config file for NODE_ENV\n    var anyFilesMatchEnv = sourceFilenames.some(function (filename) {\n      return filename.match(env);\n    }); // development is special-cased because it's the default value\n\n    if (env && env !== 'development' && !anyFilesMatchEnv) {\n      _warnOrThrow(\"NODE_ENV value of '\" + env + \"' did not match any deployment config file names.\");\n    } // Throw if NODE_ENV matches' default' or 'local'\n\n\n    if (env === 'default' || env === 'local') {\n      _warnOrThrow(\"NODE_ENV value of '\" + env + \"' is ambiguous.\");\n    }\n  }); // Throw an exception if there's no explict config file for NODE_APP_INSTANCE\n\n  var anyFilesMatchInstance = sourceFilenames.some(function (filename) {\n    return filename.match(APP_INSTANCE);\n  });\n\n  if (APP_INSTANCE && !anyFilesMatchInstance) {\n    _warnOrThrow(\"NODE_APP_INSTANCE value of '\" + APP_INSTANCE + \"' did not match any instance config file names.\");\n  }\n\n  function _warnOrThrow(msg) {\n    var beStrict = process.env.NODE_CONFIG_STRICT_MODE;\n    var prefix = beStrict ? 'FATAL: ' : 'WARNING: ';\n    var seeURL = 'See https://github.com/lorenwest/node-config/wiki/Strict-Mode';\n    console.error(prefix + msg);\n    console.error(prefix + seeURL); // Accept 1 and true as truthy values. When set via process.env, Node.js casts them to strings.\n\n    if ([\"true\", \"1\"].indexOf(beStrict) >= 0) {\n      throw new Error(prefix + msg + ' ' + seeURL);\n    }\n  }\n}; // Instantiate and export the configuration\n\n\nvar config = module.exports = new Config(); // copy methods to util for backwards compatibility\n\nutil.stripComments = Parser.stripComments;\nutil.stripYamlComments = Parser.stripYamlComments; // Produce warnings if the configuration is empty\n\nvar showWarnings = !util.initParam('SUPPRESS_NO_CONFIG_WARNING');\n\nif (showWarnings && Object.keys(config).length === 0) {\n  console.error('WARNING: No configurations found in configuration directory:' + CONFIG_DIR);\n  console.error('WARNING: To disable this warning set SUPPRESS_NO_CONFIG_WARNING in the environment.');\n}","map":null,"metadata":{},"sourceType":"script"}