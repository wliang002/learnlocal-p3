{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst _ = require(\"lodash\");\n\nconst base_1 = require(\"./base\");\n\nfunction matchedData(req, options = {}) {\n  const internalReq = req;\n  const fieldExtractor = createFieldExtractor(options.includeOptionals !== true);\n  const validityFilter = createValidityFilter(options.onlyValidData);\n  const locationFilter = createLocationFilter(options.locations);\n  return _(internalReq[base_1.contextsSymbol]).flatMap(fieldExtractor).filter(validityFilter).map(field => field.instance).filter(locationFilter).reduce((state, instance) => _.set(state, instance.path, instance.value), {}).valueOf();\n}\n\nexports.matchedData = matchedData;\n\nfunction createFieldExtractor(removeOptionals) {\n  return context => {\n    const instances = context.getData({\n      requiredOnly: removeOptionals\n    });\n    return instances.map(instance => ({\n      instance,\n      context\n    }));\n  };\n}\n\nfunction createValidityFilter(onlyValidData = true) {\n  return !onlyValidData ? () => true : field => {\n    const hasError = field.context.errors.some(error => error.location === field.instance.location && error.param === field.instance.path);\n    return !hasError;\n  };\n}\n\nfunction createLocationFilter(locations = []) {\n  // No locations mean all locations\n  const allLocations = locations.length === 0;\n  return allLocations ? () => true : field => locations.includes(field.location);\n}","map":null,"metadata":{},"sourceType":"script"}