{"ast":null,"code":"// Create a deferredConfig prototype so that we can check for it when reviewing the configs later.\nfunction DeferredConfig() {}\n\nDeferredConfig.prototype.prepare = function () {};\n\nDeferredConfig.prototype.resolve = function () {}; // Accept a function that we'll use to resolve this value later and return a 'deferred' configuration value to resolve it later.\n\n\nfunction deferConfig(func) {\n  var obj = Object.create(DeferredConfig.prototype);\n\n  obj.prepare = function (config, prop, property) {\n    var original = prop[property]._original;\n\n    obj.resolve = function () {\n      var value = func.call(config, config, original);\n      Object.defineProperty(prop, property, {\n        value: value\n      });\n      return value;\n    };\n\n    Object.defineProperty(prop, property, {\n      get: function () {\n        return obj.resolve();\n      }\n    });\n    return obj;\n  };\n\n  return obj;\n}\n\nmodule.exports.deferConfig = deferConfig;\nmodule.exports.DeferredConfig = DeferredConfig;","map":null,"metadata":{},"sourceType":"script"}