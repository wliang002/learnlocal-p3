{"ast":null,"code":"const express = require('express');\n\nconst router = express.Router();\n\nconst bcrypt = require('bcryptjs');\n\nconst auth = require('../../middleware/auth');\n\nconst jwt = require('jsonwebtoken');\n\nconst config = require('config');\n\nconst _require = require('express-validator/check'),\n      check = _require.check,\n      validationResult = _require.validationResult;\n\nconst User = require('../../models/User'); // add middleware 'auth' to protect the route\n// @route    GET api/auth\n// @desc     Test route\n// @access   Public\n\n\nrouter.get('/', auth, async (req, res) => {\n  try {\n    // leave off the password in the data\n    const user = await User.findById(req.user.id).select('-password');\n    res.json(user);\n  } catch (err) {\n    console.error(err.message);\n    res.status(500).send('Server Error');\n  }\n}); // authenticate user & get token\n// @route    POST api/auth\n// @desc     Authenticate user & get token\n// @access   Public\n\nrouter.post('/', [check('email', 'Please include a valid email').isEmail(), check('password', 'Password is required').exists()], async (req, res) => {\n  const errors = validationResult(req);\n\n  if (!errors.isEmpty()) {\n    return res.status(400).json({\n      errors: errors.array()\n    });\n  }\n\n  const _req$body = req.body,\n        email = _req$body.email,\n        password = _req$body.password;\n\n  try {\n    let user = await User.findOne({\n      email\n    }); // if user doesn't exist\n\n    if (!user) {\n      return res.status(400).json({\n        errors: [{\n          msg: 'Invalid Credentials'\n        }]\n      });\n    } // check if password is correct using bcrypt.compare which returns a promise\n\n\n    const isMatch = await bcrypt.compare(password, user.password); // if password is incorrect\n\n    if (!isMatch) {\n      return res.status(400).json({\n        errors: [{\n          msg: 'Invalid Credentials'\n        }]\n      });\n    }\n\n    const payload = {\n      user: {\n        id: user.id\n      }\n    };\n    jwt.sign(payload, config.get('jwtSecret'), {\n      expiresIn: 360000\n    }, (err, token) => {\n      if (err) throw err;\n      res.json({\n        token\n      });\n    });\n  } catch (err) {\n    console.error(err.message);\n    res.status(500).send('Server error');\n  }\n});\nmodule.exports = router;","map":null,"metadata":{},"sourceType":"script"}