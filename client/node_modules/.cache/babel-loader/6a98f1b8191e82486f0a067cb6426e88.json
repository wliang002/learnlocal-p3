{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : new P(function (resolve) {\n        resolve(result.value);\n      }).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst select_fields_1 = require(\"../select-fields\");\n\nconst base_1 = require(\"../base\");\n\nclass ContextRunnerImpl {\n  constructor(builder, selectFields = select_fields_1.selectFields) {\n    this.builder = builder;\n    this.selectFields = selectFields;\n  }\n\n  run(req, options = {}) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const context = this.builder.build();\n      const instances = this.selectFields(req, context.fields, context.locations);\n      context.addFieldInstances(instances);\n      const haltedInstances = new Set();\n\n      for (const contextItem of context.stack) {\n        const promises = context.getData({\n          requiredOnly: true\n        }).map(instance => __awaiter(this, void 0, void 0, function* () {\n          const instanceKey = \"\".concat(instance.location, \":\").concat(instance.path);\n\n          if (haltedInstances.has(instanceKey)) {\n            return;\n          }\n\n          try {\n            yield contextItem.run(context, instance.value, {\n              req,\n              location: instance.location,\n              path: instance.path\n            });\n          } catch (e) {\n            if (e instanceof base_1.ValidationHalt) {\n              haltedInstances.add(instanceKey);\n              return;\n            }\n\n            throw e;\n          }\n        }));\n        yield Promise.all(promises);\n      }\n\n      if (options.saveContext === undefined || options.saveContext) {\n        const internalReq = req;\n        internalReq[base_1.contextsSymbol] = (internalReq[base_1.contextsSymbol] || []).concat(context);\n      }\n\n      return context;\n    });\n  }\n\n}\n\nexports.ContextRunnerImpl = ContextRunnerImpl;","map":null,"metadata":{},"sourceType":"script"}