{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : new P(function (resolve) {\n        resolve(result.value);\n      }).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nclass CustomValidation {\n  constructor(validator, negated) {\n    this.validator = validator;\n    this.negated = negated;\n  }\n\n  run(context, value, meta) {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        const result = this.validator(value, meta);\n        const actualResult = yield result;\n        const isPromise = result && result.then;\n        const failed = this.negated ? actualResult : !actualResult; // A promise that was resolved only adds an error if negated.\n        // Otherwise it always suceeds\n\n        if (!isPromise && failed || isPromise && this.negated) {\n          context.addError(this.message, value, meta);\n        }\n      } catch (err) {\n        if (this.negated) {\n          return;\n        }\n\n        context.addError((err instanceof Error ? err.message : err) || this.message, value, meta);\n      }\n    });\n  }\n\n}\n\nexports.CustomValidation = CustomValidation;","map":null,"metadata":{},"sourceType":"script"}