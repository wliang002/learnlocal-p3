{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst _ = require(\"lodash\");\n\nconst base_1 = require(\"./base\");\n\nconst utils_1 = require(\"./utils\"); // Assign to a variable so that TS doesn't use its catch all overload, which returns any\n\n\nconst withWithDefaults = {\n  withDefaults\n};\nexports.validationResult = Object.assign(withDefaults(), withWithDefaults);\n\nclass Result {\n  constructor(formatter, errors) {\n    this.formatter = formatter;\n    this.errors = errors;\n  }\n\n  array(options) {\n    return options && options.onlyFirstError ? Object.values(this.mapped()) : this.errors.map(this.formatter);\n  }\n\n  mapped() {\n    return this.errors.reduce((mapping, error) => {\n      if (!mapping[error.param]) {\n        mapping[error.param] = this.formatter(error);\n      }\n\n      return mapping;\n    }, {});\n  }\n\n  formatWith(formatter) {\n    return new Result(formatter, this.errors);\n  }\n\n  isEmpty() {\n    return this.errors.length === 0;\n  }\n\n  throw() {\n    if (!this.isEmpty()) {\n      throw Object.assign(new Error(), utils_1.bindAll(this));\n    }\n  }\n\n}\n\nexports.Result = Result;\n\nfunction withDefaults(options = {}) {\n  const defaults = {\n    formatter: error => error\n  };\n\n  const actualOptions = _.defaults(options, defaults);\n\n  return req => {\n    const contexts = req[base_1.contextsSymbol] || [];\n\n    const errors = _.flatMap(contexts, 'errors');\n\n    return new Result(actualOptions.formatter, errors);\n  };\n}","map":null,"metadata":{},"sourceType":"script"}