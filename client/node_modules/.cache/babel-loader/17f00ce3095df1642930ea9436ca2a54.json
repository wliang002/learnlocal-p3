{"ast":null,"code":"import axios from 'axios';\nimport { setAlert } from './alert';\nimport setAuthToken from '../utils/setAuthToken'; // @resources https://github.com/reduxjs/redux\n// Load User\n\nexport const loadUser = () => async dispatch => {\n  // if there is a token, send it to a global header\n  if (localStorage.token) {\n    setAuthToken(localStorage.token);\n  }\n\n  try {\n    const res = await axios.get('/api/auth'); // payload is the user\n\n    dispatch({\n      type: 'USER_LOADED',\n      payload: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: 'AUTH_ERROR'\n    });\n  }\n}; // Register User\n\nexport const register = ({\n  name,\n  email,\n  password\n}) => async dispatch => {\n  // making axio request\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    } // prepare the data to send\n\n  };\n  const body = JSON.stringify({\n    name,\n    email,\n    password\n  });\n\n  try {\n    // make a post request\n    const res = await axios.post('/api/users', body, config);\n    dispatch({\n      type: 'REGISTER_SUCCESS',\n      // a token will be returned\n      payload: res.data\n    });\n    dispatch(loadUser());\n  } catch (err) {\n    const errors = err.response.data.errors;\n\n    if (errors) {\n      errors.forEach(error => dispatch(setAlert(error.msg, 'danger')));\n    }\n\n    dispatch({\n      type: 'REGISTER_FAIL'\n    });\n  }\n}; // Login User\n\nexport const login = (email, password) => async dispatch => {\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    } // create an object {email, password} and pass it in\n\n  };\n  const body = JSON.stringify({\n    email,\n    password\n  });\n\n  try {\n    // make a post request to auth\n    const res = await axios.post('/api/auth', body, config);\n    dispatch({\n      type: 'LOGIN_SUCCESS',\n      payload: res.data\n    });\n    dispatch(loadUser());\n  } catch (err) {\n    const errors = err.response.data.errors;\n\n    if (errors) {\n      errors.forEach(error => dispatch(setAlert(error.msg, 'danger')));\n    }\n\n    dispatch({\n      type: 'LOGIN_FAIL'\n    });\n  }\n}; // Logout/ Clear Profile\n\nexport const logout = () => dispatch => {\n  dispatch({\n    type: 'LOGOUT'\n  });\n  dispatch({\n    type: 'CLEAR_PROFILE'\n  });\n};","map":{"version":3,"sources":["/Users/weixinliang/Desktop/project3/current/learnlocal-p3/client/src/actions/auth.js"],"names":["axios","setAlert","setAuthToken","loadUser","dispatch","localStorage","token","res","get","type","payload","data","err","register","name","email","password","config","headers","body","JSON","stringify","post","errors","response","forEach","error","msg","login","logout"],"mappings":"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","sourcesContent":["import axios from 'axios'\nimport { setAlert } from './alert'\nimport setAuthToken from '../utils/setAuthToken'\n// @resources https://github.com/reduxjs/redux\n// Load User\nexport const loadUser = () => async dispatch => {\n  // if there is a token, send it to a global header\n  if (localStorage.token) {\n    setAuthToken(localStorage.token)\n  }\n\n  try {\n    const res = await axios.get('/api/auth')\n    // payload is the user\n    dispatch({\n      type: 'USER_LOADED',\n      payload: res.data\n    })\n  } catch (err) {\n    dispatch({\n      type: 'AUTH_ERROR'\n    })\n  }\n}\n\n// Register User\nexport const register = ({ name, email, password }) => async dispatch => {\n  // making axio request\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  }\n  // prepare the data to send\n  const body = JSON.stringify({ name, email, password })\n\n  try {\n    // make a post request\n    const res = await axios.post('/api/users', body, config)\n    dispatch({\n      type: 'REGISTER_SUCCESS',\n      // a token will be returned\n      payload: res.data\n    })\n    dispatch(loadUser())\n  } catch (err) {\n    const errors = err.response.data.errors\n\n    if (errors) {\n      errors.forEach(error => dispatch(setAlert(error.msg, 'danger')))\n    }\n\n    dispatch({\n      type: 'REGISTER_FAIL'\n    })\n  }\n}\n\n// Login User\nexport const login = (email, password) => async dispatch => {\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  }\n  // create an object {email, password} and pass it in\n  const body = JSON.stringify({ email, password })\n\n  try {\n    // make a post request to auth\n    const res = await axios.post('/api/auth', body, config)\n\n    dispatch({\n      type: 'LOGIN_SUCCESS',\n      payload: res.data\n    })\n    dispatch(loadUser())\n  } catch (err) {\n    const errors = err.response.data.errors\n\n    if (errors) {\n      errors.forEach(error => dispatch(setAlert(error.msg, 'danger')))\n    }\n\n    dispatch({\n      type: 'LOGIN_FAIL'\n    })\n  }\n}\n\n// Logout/ Clear Profile\nexport const logout = () => dispatch => {\n  dispatch({ type: 'LOGOUT' })\n  dispatch({ type: 'CLEAR_PROFILE' })\n}\n"]},"metadata":{},"sourceType":"module"}